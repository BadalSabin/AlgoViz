<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>DFSViewClass</class>
 <widget class="QWidget" name="DFSViewClass">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>1100</width>
    <height>530</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>Form</string>
  </property>
  <widget class="QPushButton" name="dfsHomeBtn">
   <property name="geometry">
    <rect>
     <x>710</x>
     <y>10</y>
     <width>75</width>
     <height>23</height>
    </rect>
   </property>
   <property name="text">
    <string>Home</string>
   </property>
  </widget>
  <widget class="QLabel" name="dfsConsoleLabel">
   <property name="geometry">
    <rect>
     <x>720</x>
     <y>110</y>
     <width>47</width>
     <height>21</height>
    </rect>
   </property>
   <property name="text">
    <string>Console:</string>
   </property>
  </widget>
  <widget class="QWidget" name="layoutWidget">
   <property name="geometry">
    <rect>
     <x>10</x>
     <y>10</y>
     <width>691</width>
     <height>97</height>
    </rect>
   </property>
   <layout class="QVBoxLayout" name="dfsHeaderAndControlPane">
    <item>
     <widget class="QLabel" name="dfsHeaderLabel">
      <property name="layoutDirection">
       <enum>Qt::RightToLeft</enum>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:11pt; font-weight:600;&quot;&gt;DEPTH FIRST SEARCH&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignCenter</set>
      </property>
     </widget>
    </item>
    <item>
     <layout class="QHBoxLayout" name="dfsControlPane">
      <item>
       <widget class="QLineEdit" name="dfsInsertLineEdit"/>
      </item>
      <item>
       <widget class="QPushButton" name="dfsInsertBtn">
        <property name="text">
         <string>Run</string>
        </property>
       </widget>
      </item>
      <item>
       <widget class="Line" name="dfsInsertNewGraphSepLine">
        <property name="orientation">
         <enum>Qt::Vertical</enum>
        </property>
       </widget>
      </item>
      <item>
       <widget class="QPushButton" name="dfsNewGraphBtn">
        <property name="enabled">
         <bool>false</bool>
        </property>
        <property name="text">
         <string>New Graph</string>
        </property>
       </widget>
      </item>
     </layout>
    </item>
   </layout>
  </widget>
  <widget class="QWidget" name="dfsAnimAreaPane" native="true">
   <property name="geometry">
    <rect>
     <x>10</x>
     <y>110</y>
     <width>691</width>
     <height>411</height>
    </rect>
   </property>
   <widget class="QGraphicsView" name="dfsAnimArea">
    <property name="geometry">
     <rect>
      <x>0</x>
      <y>0</y>
      <width>701</width>
      <height>411</height>
     </rect>
    </property>
   </widget>
  </widget>
  <widget class="Line" name="dfsAnimTextAreaSeparator">
   <property name="geometry">
    <rect>
     <x>695</x>
     <y>110</y>
     <width>31</width>
     <height>411</height>
    </rect>
   </property>
   <property name="orientation">
    <enum>Qt::Vertical</enum>
   </property>
  </widget>
  <widget class="QPlainTextEdit" name="dfsPlainTextEdit">
   <property name="geometry">
    <rect>
     <x>720</x>
     <y>130</y>
     <width>371</width>
     <height>171</height>
    </rect>
   </property>
   <property name="readOnly">
    <bool>true</bool>
   </property>
  </widget>
  <widget class="QLabel" name="dfsInfoConsoleLabel">
   <property name="geometry">
    <rect>
     <x>720</x>
     <y>310</y>
     <width>47</width>
     <height>21</height>
    </rect>
   </property>
   <property name="text">
    <string>Theory:</string>
   </property>
  </widget>
  <widget class="QTextBrowser" name="dfsInfoTextBrowser">
   <property name="geometry">
    <rect>
     <x>720</x>
     <y>330</y>
     <width>371</width>
     <height>191</height>
    </rect>
   </property>
   <property name="html">
    <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
&lt;h1 style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#f9fafc;&quot;&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:27pt; font-weight:600; color:#000000;&quot;&gt;Depth First Search (DFS)&lt;/span&gt;&lt;span style=&quot; font-size:8pt; font-weight:600;&quot;&gt; &lt;/span&gt;&lt;/h1&gt;
&lt;h1 style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt; font-weight:600; background-color:#f9fafc;&quot;&gt;&lt;br /&gt;&lt;/h1&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#f9fafc;&quot;&gt;&lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:10pt; color:#25265e;&quot;&gt;D&lt;/span&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:10pt; color:#25265e;&quot;&gt;epth first Search or Depth first traversal is a recursive algorithm for searching all the vertices of a graph or tree data structure. Traversal means visiting all the nodes of a &lt;/span&gt;&lt;a href=&quot;https://www.programiz.com/dsa/graph&quot;&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:10pt; text-decoration: underline; color:#0556f3;&quot;&gt;graph&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:10pt; color:#25265e;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot; font-size:10pt;&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot; style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt; background-color:#f9fafc;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr width=&quot;100%&quot;/&gt;
&lt;h2 style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#f9fafc;&quot;&gt;&lt;a name=&quot;algo&quot;&gt;&lt;/a&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:8pt; font-weight:600; color:#25265e;&quot;&gt;D&lt;/span&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:8pt; font-weight:600; color:#25265e;&quot;&gt;epth First Search Algorithm&lt;/span&gt;&lt;span style=&quot; font-size:8pt; font-weight:600;&quot;&gt; &lt;/span&gt;&lt;/h2&gt;
&lt;h2 style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt; font-weight:600; background-color:#f9fafc;&quot;&gt;&lt;br /&gt;&lt;/h2&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#f9fafc;&quot;&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:10pt; color:#25265e;&quot;&gt;A standard DFS implementation puts each vertex of the graph into one of two categories:&lt;/span&gt;&lt;span style=&quot; font-size:10pt;&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#f9fafc;&quot;&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:10pt; color:#25265e;&quot;&gt;1.&lt;/span&gt;&lt;span style=&quot; font-family:'Times New Roman'; font-size:10pt; color:#25265e;&quot;&gt;   &lt;/span&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:10pt; color:#25265e;&quot;&gt;Visited&lt;/span&gt;&lt;span style=&quot; font-size:10pt;&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#f9fafc;&quot;&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:10pt; color:#25265e;&quot;&gt;2.&lt;/span&gt;&lt;span style=&quot; font-family:'Times New Roman'; font-size:10pt; color:#25265e;&quot;&gt;   &lt;/span&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:10pt; color:#25265e;&quot;&gt;Not Visited&lt;/span&gt;&lt;span style=&quot; font-size:10pt;&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#f9fafc;&quot;&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:10pt; color:#25265e;&quot;&gt;The purpose of the algorithm is to mark each vertex as visited while avoiding cycles.&lt;/span&gt;&lt;span style=&quot; font-size:10pt;&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#f9fafc;&quot;&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:10pt; color:#25265e;&quot;&gt;The DFS algorithm works as follows:&lt;/span&gt;&lt;span style=&quot; font-size:10pt;&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#f9fafc;&quot;&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:10pt; color:#25265e;&quot;&gt;1.&lt;/span&gt;&lt;span style=&quot; font-family:'Times New Roman'; font-size:10pt; color:#25265e;&quot;&gt;   &lt;/span&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:10pt; color:#25265e;&quot;&gt;Start by putting any one of the graph's vertices on top of a stack.&lt;/span&gt;&lt;span style=&quot; font-size:10pt;&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#f9fafc;&quot;&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:10pt; color:#25265e;&quot;&gt;2.&lt;/span&gt;&lt;span style=&quot; font-family:'Times New Roman'; font-size:10pt; color:#25265e;&quot;&gt;   &lt;/span&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:10pt; color:#25265e;&quot;&gt;Take the top item of the stack and add it to the visited list.&lt;/span&gt;&lt;span style=&quot; font-size:10pt;&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#f9fafc;&quot;&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:10pt; color:#25265e;&quot;&gt;3.&lt;/span&gt;&lt;span style=&quot; font-family:'Times New Roman'; font-size:10pt; color:#25265e;&quot;&gt;   &lt;/span&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:10pt; color:#25265e;&quot;&gt;Create a list of that vertex's adjacent nodes. Add the ones which aren't in the visited list to the top of the stack.&lt;/span&gt;&lt;span style=&quot; font-size:10pt;&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#f9fafc;&quot;&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:10pt; color:#25265e;&quot;&gt;4.&lt;/span&gt;&lt;span style=&quot; font-family:'Times New Roman'; font-size:10pt; color:#25265e;&quot;&gt;   &lt;/span&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:10pt; color:#25265e;&quot;&gt;Keep repeating steps 2 and 3 until the stack is empty.&lt;/span&gt;&lt;span style=&quot; font-size:10pt;&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'-apple-system','BlinkMacSystemFont','Segoe UI Adjusted','Segoe UI','Liberation Sans','sans-serif'; font-size:8pt; font-weight:600; color:#232629; background-color:#ffffff;&quot;&gt;Time complexity&lt;/span&gt;&lt;span style=&quot; font-family:'-apple-system','BlinkMacSystemFont','Segoe UI Adjusted','Segoe UI','Liberation Sans','sans-serif'; font-size:8pt; color:#232629; background-color:#ffffff;&quot;&gt; is again &lt;/span&gt;&lt;span style=&quot; font-family:'Courier New'; font-size:8pt; color:#232629;&quot;&gt;O(|V|)&lt;/span&gt;&lt;span style=&quot; font-family:'-apple-system','BlinkMacSystemFont','Segoe UI Adjusted','Segoe UI','Liberation Sans','sans-serif'; font-size:8pt; color:#232629; background-color:#ffffff;&quot;&gt;, you need to traverse all nodes. &lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'-apple-system','BlinkMacSystemFont','Segoe UI Adjusted','Segoe UI','Liberation Sans','sans-serif'; font-size:8pt; font-weight:600; color:#232629; background-color:#ffffff;&quot;&gt;Space complexity&lt;/span&gt;&lt;span style=&quot; font-family:'-apple-system','BlinkMacSystemFont','Segoe UI Adjusted','Segoe UI','Liberation Sans','sans-serif'; font-size:8pt; color:#232629; background-color:#ffffff;&quot;&gt; - depends on the implementation, a recursive implementation can have a &lt;/span&gt;&lt;span style=&quot; font-family:'Courier New'; font-size:11pt; color:#232629;&quot;&gt;O(h)&lt;/span&gt;&lt;span style=&quot; font-family:'-apple-system','BlinkMacSystemFont','Segoe UI Adjusted','Segoe UI','Liberation Sans','sans-serif'; font-size:8pt; color:#232629; background-color:#ffffff;&quot;&gt; space complexity [worst case], where &lt;/span&gt;&lt;span style=&quot; font-family:'Courier New'; font-size:8pt; color:#232629;&quot;&gt;h&lt;/span&gt;&lt;span style=&quot; font-family:'-apple-system','BlinkMacSystemFont','Segoe UI Adjusted','Segoe UI','Liberation Sans','sans-serif'; font-size:8pt; color:#232629; background-color:#ffffff;&quot;&gt; is the maximal depth of your tree. Using an iterative solution with a stack is actually the same as BFS, just using a stack instead of a queue - so you get both &lt;/span&gt;&lt;span style=&quot; font-family:'Courier New'; font-size:8pt; color:#232629;&quot;&gt;O(|V|)&lt;/span&gt;&lt;span style=&quot; font-family:'-apple-system','BlinkMacSystemFont','Segoe UI Adjusted','Segoe UI','Liberation Sans','sans-serif'; font-size:8pt; color:#232629; background-color:#ffffff;&quot;&gt; time and space complexity.&lt;/span&gt;&lt;span style=&quot; font-size:8pt;&quot;&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
   </property>
  </widget>
 </widget>
 <resources/>
 <connections/>
</ui>
