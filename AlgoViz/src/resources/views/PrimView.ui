<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>PrimViewClass</class>
 <widget class="QWidget" name="PrimViewClass">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>1101</width>
    <height>529</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>Form</string>
  </property>
  <widget class="QLabel" name="primInfoConsoleLabel">
   <property name="geometry">
    <rect>
     <x>720</x>
     <y>310</y>
     <width>47</width>
     <height>21</height>
    </rect>
   </property>
   <property name="text">
    <string>Theory:</string>
   </property>
  </widget>
  <widget class="QLabel" name="primConsoleLabel">
   <property name="geometry">
    <rect>
     <x>720</x>
     <y>110</y>
     <width>47</width>
     <height>21</height>
    </rect>
   </property>
   <property name="text">
    <string>Console:</string>
   </property>
  </widget>
  <widget class="QTextBrowser" name="primInfoTextBrowser">
   <property name="geometry">
    <rect>
     <x>720</x>
     <y>330</y>
     <width>371</width>
     <height>191</height>
    </rect>
   </property>
   <property name="html">
    <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'-apple-system','BlinkMacSystemFont','Segoe UI Adjusted','Segoe UI','Liberation Sans','sans-serif'; font-size:8pt; color:#232629; background-color:#ffffff;&quot;&gt;For a graph with &lt;/span&gt;&lt;span style=&quot; font-family:'-apple-system','BlinkMacSystemFont','Segoe UI Adjusted','Segoe UI','Liberation Sans','sans-serif'; font-size:8pt; font-weight:600; color:#232629; background-color:#ffffff;&quot;&gt;V&lt;/span&gt;&lt;span style=&quot; font-family:'-apple-system','BlinkMacSystemFont','Segoe UI Adjusted','Segoe UI','Liberation Sans','sans-serif'; font-size:8pt; color:#232629; background-color:#ffffff;&quot;&gt; vertices &lt;/span&gt;&lt;span style=&quot; font-family:'-apple-system','BlinkMacSystemFont','Segoe UI Adjusted','Segoe UI','Liberation Sans','sans-serif'; font-size:8pt; font-weight:600; color:#232629; background-color:#ffffff;&quot;&gt;E&lt;/span&gt;&lt;span style=&quot; font-family:'-apple-system','BlinkMacSystemFont','Segoe UI Adjusted','Segoe UI','Liberation Sans','sans-serif'; font-size:8pt; color:#232629; background-color:#ffffff;&quot;&gt; edges, Prim's algorithm can run in &lt;/span&gt;&lt;span style=&quot; font-family:'-apple-system','BlinkMacSystemFont','Segoe UI Adjusted','Segoe UI','Liberation Sans','sans-serif'; font-size:8pt; font-weight:600; color:#232629; background-color:#ffffff;&quot;&gt;O(E + V log V)&lt;/span&gt;&lt;span style=&quot; font-family:'-apple-system','BlinkMacSystemFont','Segoe UI Adjusted','Segoe UI','Liberation Sans','sans-serif'; font-size:8pt; color:#232629; background-color:#ffffff;&quot;&gt; amortized time, if you use a &lt;/span&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Fibonacci_heap&quot;&gt;&lt;span style=&quot; font-family:'-apple-system','BlinkMacSystemFont','Segoe UI Adjusted','Segoe UI','Liberation Sans','sans-serif'; font-size:8pt; text-decoration: underline; color:#000000; background-color:#ffffff;&quot;&gt;Fibonacci Heap&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot; font-family:'-apple-system','BlinkMacSystemFont','Segoe UI Adjusted','Segoe UI','Liberation Sans','sans-serif'; font-size:8pt; color:#232629; background-color:#ffffff;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:'-apple-system','BlinkMacSystemFont','Segoe UI Adjusted','Segoe UI','Liberation Sans','sans-serif'; font-size:8pt; color:#232629;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'-apple-system','BlinkMacSystemFont','Segoe UI Adjusted','Segoe UI','Liberation Sans','sans-serif'; font-size:8pt; color:#232629; background-color:#ffffff;&quot;&gt;Prim's algorithm is significantly faster in the limit when you've got a really dense graph with many more edges than vertices. Kruskal performs better in typical situations (sparse graphs) because it uses simpler data structures.&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:'-apple-system','BlinkMacSystemFont','Segoe UI Adjusted','Segoe UI','Liberation Sans','sans-serif'; font-size:8pt; color:#232629;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'-apple-system','BlinkMacSystemFont','Segoe UI Adjusted','Segoe UI','Liberation Sans','sans-serif'; font-size:8pt; color:#232629; background-color:#ffffff;&quot;&gt;So, Use Prim's algorithm when you have a graph with lots of edges.&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:'-apple-system','BlinkMacSystemFont','Segoe UI Adjusted','Segoe UI','Liberation Sans','sans-serif'; font-size:8pt; color:#232629;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:8pt; font-weight:600; color:#272c37;&quot;&gt;Introduction to Prim’s Algorithm&lt;/span&gt;&lt;span style=&quot; font-size:8pt;&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#ffffff;&quot;&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:8pt; color:#51565e;&quot;&gt;Prim’s algorithm is used to find the Minimum Spanning Tree for a given graph. But, what is a Minimum Spanning Tree, or MST for short? A minimum spanning tree T(V’, E’) is a subset of graph G(V, E) with the same number of vertices as of graph G (V’ = V) and edges equal to the number of vertices of graph G minus one (E’ = |V| - 1). Prim's approach identifies the subset of edges that includes every vertex in the graph, and allows the sum of the edge weights to be minimized.&lt;/span&gt;&lt;span style=&quot; font-size:8pt;&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt; background-color:#ffffff;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#ffffff;&quot;&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:8pt; color:#51565e;&quot;&gt;Prim’s algorithm starts with a single node and works its way through several adjacent nodes, exploring all of the connected edges along the way. Edges with the minimum weights that do not cause cycles in the graph get selected for t inclusion in the MST structure. Hence, we can say that Prim’s algorithm takes a locally optimum decision in order to find the globally optimal solution. That is why it is also known as a Greedy Algorithm.&lt;/span&gt;&lt;span style=&quot; font-size:8pt;&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#ffffff;&quot;&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:8pt; font-weight:600; color:#272c37;&quot;&gt;How to Create MST Using Prim’s Algorithm&lt;/span&gt;&lt;span style=&quot; font-size:8pt; font-weight:600;&quot;&gt; &lt;/span&gt;&lt;/h2&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#ffffff;&quot;&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:8pt; color:#51565e;&quot;&gt;Let’s first look into the steps involved in Prim’s Algorithm to generate a minimum spanning tree:&lt;/span&gt;&lt;span style=&quot; font-size:8pt;&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#ffffff;&quot;&gt;&lt;span style=&quot; font-family:'Symbol'; font-size:10pt; color:#51565e;&quot;&gt;·&lt;/span&gt;&lt;span style=&quot; font-family:'Times New Roman'; font-size:7pt; color:#51565e;&quot;&gt;         &lt;/span&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:8pt; color:#51565e;&quot;&gt;Step 1: Determine the arbitrary starting vertex.&lt;/span&gt;&lt;span style=&quot; font-size:8pt;&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#ffffff;&quot;&gt;&lt;span style=&quot; font-family:'Symbol'; font-size:10pt; color:#51565e;&quot;&gt;·&lt;/span&gt;&lt;span style=&quot; font-family:'Times New Roman'; font-size:7pt; color:#51565e;&quot;&gt;         &lt;/span&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:8pt; color:#51565e;&quot;&gt;Step 2: Keep repeating steps 3 and 4 until the fringe vertices (vertices not included in MST) remain. &lt;/span&gt;&lt;span style=&quot; font-size:8pt;&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#ffffff;&quot;&gt;&lt;span style=&quot; font-family:'Symbol'; font-size:10pt; color:#51565e;&quot;&gt;·&lt;/span&gt;&lt;span style=&quot; font-family:'Times New Roman'; font-size:7pt; color:#51565e;&quot;&gt;         &lt;/span&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:8pt; color:#51565e;&quot;&gt;Step 3: Select an edge connecting the tree vertex and fringe vertex having the minimum weight.&lt;/span&gt;&lt;span style=&quot; font-size:8pt;&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#ffffff;&quot;&gt;&lt;span style=&quot; font-family:'Symbol'; font-size:10pt; color:#51565e;&quot;&gt;·&lt;/span&gt;&lt;span style=&quot; font-family:'Times New Roman'; font-size:7pt; color:#51565e;&quot;&gt;         &lt;/span&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:8pt; color:#51565e;&quot;&gt;Step 4: Add the chosen edge to MST if it doesn’t form any closed cycle.&lt;/span&gt;&lt;span style=&quot; font-size:8pt;&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#ffffff;&quot;&gt;&lt;span style=&quot; font-family:'Symbol'; font-size:10pt; color:#51565e;&quot;&gt;·&lt;/span&gt;&lt;span style=&quot; font-family:'Times New Roman'; font-size:7pt; color:#51565e;&quot;&gt;         &lt;/span&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:8pt; color:#51565e;&quot;&gt;Step 5: Exit&lt;/span&gt;&lt;span style=&quot; font-size:8pt;&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#ffffff;&quot;&gt;&lt;span style=&quot; font-family:'Arial','sans-serif'; font-size:8pt; color:#51565e;&quot;&gt;Using the steps mentioned above, we are supposed to generate a minimum spanning tree structure.&lt;/span&gt;&lt;span style=&quot; font-size:8pt;&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:8pt;&quot;&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
   </property>
  </widget>
  <widget class="QWidget" name="primAnimAreaPane" native="true">
   <property name="geometry">
    <rect>
     <x>10</x>
     <y>110</y>
     <width>691</width>
     <height>411</height>
    </rect>
   </property>
   <widget class="QGraphicsView" name="primAnimArea">
    <property name="geometry">
     <rect>
      <x>0</x>
      <y>0</y>
      <width>701</width>
      <height>411</height>
     </rect>
    </property>
   </widget>
  </widget>
  <widget class="Line" name="primAnimTextAreaSeparator">
   <property name="geometry">
    <rect>
     <x>695</x>
     <y>110</y>
     <width>31</width>
     <height>411</height>
    </rect>
   </property>
   <property name="orientation">
    <enum>Qt::Vertical</enum>
   </property>
  </widget>
  <widget class="QPlainTextEdit" name="primPlainTextEdit">
   <property name="geometry">
    <rect>
     <x>720</x>
     <y>130</y>
     <width>371</width>
     <height>171</height>
    </rect>
   </property>
   <property name="readOnly">
    <bool>true</bool>
   </property>
  </widget>
  <widget class="QWidget" name="layoutWidget">
   <property name="geometry">
    <rect>
     <x>10</x>
     <y>10</y>
     <width>691</width>
     <height>97</height>
    </rect>
   </property>
   <layout class="QVBoxLayout" name="primHeaderAndControlPane">
    <item>
     <widget class="QLabel" name="primHeaderLabel">
      <property name="layoutDirection">
       <enum>Qt::RightToLeft</enum>
      </property>
      <property name="text">
       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:11pt; font-weight:600;&quot;&gt;PRIM's MINIMUM SPANNIG TREE&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
      </property>
      <property name="alignment">
       <set>Qt::AlignCenter</set>
      </property>
     </widget>
    </item>
    <item>
     <layout class="QHBoxLayout" name="primControlPane">
      <item>
       <widget class="QPushButton" name="primInsertBtn">
        <property name="text">
         <string>Run</string>
        </property>
       </widget>
      </item>
      <item>
       <widget class="Line" name="primInsertNewGraphSepLine">
        <property name="orientation">
         <enum>Qt::Vertical</enum>
        </property>
       </widget>
      </item>
      <item>
       <widget class="QPushButton" name="primNewGraphBtn">
        <property name="enabled">
         <bool>false</bool>
        </property>
        <property name="text">
         <string>New Graph</string>
        </property>
       </widget>
      </item>
     </layout>
    </item>
   </layout>
  </widget>
  <widget class="QPushButton" name="primHomeBtn">
   <property name="geometry">
    <rect>
     <x>710</x>
     <y>10</y>
     <width>75</width>
     <height>23</height>
    </rect>
   </property>
   <property name="text">
    <string>Home</string>
   </property>
  </widget>
 </widget>
 <resources/>
 <connections/>
</ui>
